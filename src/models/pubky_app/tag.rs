use super::traits::{GenerateId, Validatable};
use base32::{encode, Alphabet};
use blake3::Hasher;
use serde::{Deserialize, Serialize};

/// Represents raw homeserver tag with id
/// URI: /pub/pubky.app/tags/:tag_id
///
/// Example URI:
///
/// `/pub/pubky.app/tags/xsmykwj3jdzdwbox6bu5yjowzw`
///
/// Where tag_id is z-base32(Sha256("{uri_tagged}:{")))[:8]
#[derive(Serialize, Deserialize, Default)]
pub struct PubkyAppTag {
    pub uri: String,
    pub label: String,
    pub created_at: i64,
}

impl GenerateId for PubkyAppTag {
    /// Tag ID is created based on the hash of the URI tagged and the label used
    fn get_id_data(&self) -> String {
        format!("{}:{}", self.uri, self.label)
    }
}
impl Validatable for PubkyAppTag {
    fn validate(&self) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        // TODO: validate ID and content of incoming tag is correct
        Ok(())
    }
}

impl PubkyAppTag {
    /// Creates a unique identifier (tag ID) for the `PubkyAppTag` instance.
    ///
    /// The tag ID is generated by:
    /// 1. Concatenating the `uri` and `label` fields of the `PubkyAppTag` with a colon (`:`) separator.
    /// 2. Hashing the concatenated string using the `blake3` hashing algorithm.
    /// 3. Taking the first half of the bytes from the resulting `blake3` hash.
    /// 4. Encoding those bytes using the Z-base32 alphabet (Base32 variant).
    ///
    /// The resulting Base32-encoded string is returned as the tag ID.
    ///
    /// # Returns
    /// - A `String` representing the Base32-encoded tag ID derived from the `blake3` hash of the concatenated `uri` and `label`.
    pub fn create_id(&self) -> String {
        // Concatenate the URI and label with a colon in between
        let data = format!("{}:{}", self.uri, self.label);

        // Create a Blake3 hash of the concatenated string
        let mut hasher = Hasher::new();
        hasher.update(data.as_bytes());
        let blake3_hash = hasher.finalize();

        // Get the first half of the hash bytes
        let half_hash_length = blake3_hash.as_bytes().len() / 2;
        let half_hash = &blake3_hash.as_bytes()[..half_hash_length];

        // Encode the first half of the hash in Base32 using the Z-base32 alphabet

        // Return the Base32 encoded string as the tag ID
        encode(Alphabet::Z, half_hash)
    }
}

#[test]
fn testcreate_id() {
    let tag = PubkyAppTag {
        uri: "user_id/pub/pubky.app/posts/post_id".to_string(),
        created_at: 1627849723,
        label: "cool".to_string(),
    };

    let tag_id = tag.create_id();
    println!("Generated Tag ID: {}", tag_id);
}
