use crate::types::DynError;
use axum::async_trait;
use axum::body::Bytes;
use base32::{decode, encode, Alphabet};
use blake3::Hasher;
use chrono::{DateTime, Duration, NaiveDate, Utc};
use pubky_common::timestamp::Timestamp;
use serde::de::DeserializeOwned;

#[async_trait]
pub trait TimestampId {
    /// Creates a unique identifier based on the current timestamp.
    fn create_id(&self) -> String {
        let timestamp = Timestamp::now();
        timestamp.to_string()
    }

    /// Validates that the provided ID is a valid Crockford Base32-encoded timestamp,
    /// 13 characters long, and represents a reasonable timestamp.
    async fn validate_id(&self, id: &str) -> Result<(), DynError> {
        // Ensure ID is 13 characters long
        if id.len() != 13 {
            return Err("Invalid ID length: must be 13 characters".into());
        }

        // Decode the Crockford Base32-encoded ID
        let decoded_bytes =
            decode(Alphabet::Crockford, id).ok_or("Failed to decode Crockford Base32 ID")?;

        if decoded_bytes.len() != 8 {
            return Err("Invalid ID length after decoding".into());
        }

        // Convert the decoded bytes to a timestamp in microseconds
        let timestamp_micros = i64::from_be_bytes(decoded_bytes.try_into().unwrap_or_default());
        let timestamp: i64 = timestamp_micros / 1_000_000;

        // Convert the timestamp to a DateTime<Utc>
        let id_datetime = DateTime::from_timestamp(timestamp, 0)
            .unwrap_or_default()
            .date_naive();

        // Define October 1st, 2024, at 00:00:00 UTC
        let oct_first_2024 = NaiveDate::from_ymd_opt(2024, 10, 1).expect("Invalid date");

        // Allowable future duration (2 hours)
        let max_future = Utc::now().date_naive() + Duration::hours(2);

        // Validate that the ID's timestamp is after October 1st, 2024
        if id_datetime < oct_first_2024 {
            return Err("Invalid ID: timestamp must be after October 1st, 2024".into());
        }

        // Validate that the ID's timestamp is not more than 2 hours in the future
        if id_datetime > max_future {
            return Err("Invalid ID: timestamp is too far in the future".into());
        }

        Ok(())
    }
}

/// Trait for generating an ID based on the struct's data.
#[async_trait]
pub trait HashId {
    fn get_id_data(&self) -> String;

    /// Creates a unique identifier for bookmarks and tag homeserver paths instance.
    ///
    /// The ID is generated by:
    /// 1. Concatenating the `uri` and `label` fields of the `PubkyAppTag` with a colon (`:`) separator.
    /// 2. Hashing the concatenated string using the `blake3` hashing algorithm.
    /// 3. Taking the first half of the bytes from the resulting `blake3` hash.
    /// 4. Encoding those bytes using the Crockford alphabet (Base32 variant).
    ///
    /// The resulting Crockford-encoded string is returned as the tag ID.
    ///
    /// # Returns
    /// - A `String` representing the Crockford-encoded tag ID derived from the `blake3` hash of the concatenated `uri` and `label`.
    fn create_id(&self) -> String {
        let data = self.get_id_data();

        // Create a Blake3 hash of the input data
        let mut hasher = Hasher::new();
        hasher.update(data.as_bytes());
        let blake3_hash = hasher.finalize();

        // Get the first half of the hash bytes
        let half_hash_length = blake3_hash.as_bytes().len() / 2;
        let half_hash = &blake3_hash.as_bytes()[..half_hash_length];

        // Encode the first half of the hash in Base32 using the Z-base32 alphabet
        encode(Alphabet::Crockford, half_hash)
    }

    /// Validates that the provided ID matches the generated ID.
    async fn validate_id(&self, id: &str) -> Result<(), DynError> {
        let generated_id = self.create_id();
        if generated_id != id {
            return Err(format!("Invalid ID: expected {}, found {}", generated_id, id).into());
        }
        Ok(())
    }
}

#[async_trait]
pub trait Validatable: Sized + DeserializeOwned {
    async fn try_from(blob: &Bytes, id: &str) -> Result<Self, DynError> {
        let mut instance: Self = serde_json::from_slice(blob)?;
        instance = instance.sanitize().await?;
        instance.validate(id).await?;
        Ok(instance)
    }

    async fn validate(&self, id: &str) -> Result<(), DynError>;

    async fn sanitize(self) -> Result<Self, DynError> {
        Ok(self)
    }
}
